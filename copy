
function Deck() {
    $(document).ready(function(){
        var one = new Card;
        one.setdeck();
        //shuffle();
        one.addcards(1);
    });
    let cardmarkup = `<div class="card">`;
    class Card{
        constructor(){
            this.values=[0,0.5,1,2,3,5,8,13,20,40,100,"?"];
            this.a = -0.02;
            this.h = 5;
            this.k = 0.5;
            this.diff = 0.1;
            this.mult = 1.6;
            this.deck=[];
        }
        setdeck(){
                for(var i=0; i<this.values.length;i++)
                {
                    var card ={Value:this.values[i]};
                    this.deck.push(card);
                }
                return this.deck;
        }
        shuffle(){
            for (var i = 0; i < 1000; i++)
            {
                var location1 = Math.floor((Math.random() * this.deck.length));
                var location2 = Math.floor((Math.random() * this.deck.length));
                var tmp = this.deck[location1];
        
                this.deck[location1] = deck[location2];
                this.deck[location2] = tmp;
            }
        }
        aligncards(){
            let cards = document.getElementsByClassName("card");
            let count = cards.length;
            Array.from(cards).forEach(card => new function(){
                let i = Array.from(cards).indexOf(card);
                let width = parseInt($(card).css('width').replace("px", ""));
                let left = width * i / 2;
        
                let totalwidth = count * (width / 2) + width / 2;
                let handwidth = $("#hand").css("width").replace("px", "");
        
                if(totalwidth > handwidth){
                    //shift the cards to fit with minimal margin leftover
                    let overflow = totalwidth - handwidth;
                    let shift = (overflow / (count - 1));
                    left -= shift * i;
                    totalwidth = handwidth;
                }
                let leftdif = (handwidth - totalwidth) / 2;
                
                left += leftdif;
                $(card).css('left', left + 'px');
        
                let center = left + width / 2;
                let xpos = center / handwidth * 10;
                let ypos = getypos(xpos);
                let rot = getrotation(xpos);
        
                let bottom = (ypos / k) * $("#hand").css("height").replace("px", "") / 4;
        
                $(card).css("bottom", bottom + "px");
                $(card).css("transform", "rotate(" + rot + "deg)");
            });
        }
        addcards(count){
            let delay = 300;
            $("#hand").append(getrandomcard());
            aligncards();
            count --;
            let x = setInterval(() => {
                if(count < 1){
                    clearInterval(x);
                }
                else{
                    $("#hand").append(cardmarkup);
                    aligncards();
                    count --;
                }
            }, delay);
        }
        getrandomcard(){
            let card = deck[0];
            this.deck = this.deck.slice(1);
            let markup = cardmarkup;
            markup += `<span class="value">${card.Value}</span><span class="suit">${card.Suit}</span></div>`;
            return markup;
        }
        getrotation(xpos){
            let ypos = getypos(xpos);
            if(xpos < h){
                //left of the vertex
                let newx = xpos + diff;
                let newy = getypos(newx);
        
                let adjacent = newx - xpos;
                let opposite = newy - ypos;
                let angle = Math.atan(opposite / adjacent);
                angle *= 180;
                angle /= Math.PI;
                angle = 0 - angle;
                return angle * multi;
            }
            else if(xpos > h){
                //right of the vertex
                let newx = xpos - diff;
                let newy = getypos(newx);
        
                let adjacent = newx - xpos;
                let opposite = newy - ypos;
                let angle = Math.atan(opposite / adjacent);
                angle *= 180;
                angle /= Math.PI;
                angle = 0 - angle;
                return angle * multi;
            }
            else{
                //on the vertex
                return 0;
            }
        }
        getypos(xpos){
            let ypos = a * Math.pow((xpos - h), 2) + k;
            return ypos;
        }
    }
    return(
        <div className="deck">
        <button id="addcards" onClick="one.addcards(1)"></button>
        <div id="hand"></div>
        </div>
    );
}
export default Deck;